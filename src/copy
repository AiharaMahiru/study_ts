abstract class Person {
    name: string;
    age: number;
    constructor(name: string, age: number) {
        this.name = name;
        this.age = age;
    }
    show_name(){
        console.log(this.name);
    }
}

//这里jb继承了Person类
class jb extends Person {
    constructor(name: string, age: number) {
        super(name, age);
    }
    show_age() {
        console.log(this.age);
    }
}

//接口
interface Anime {
    name: string;
    date: string;
    time: string;
    show_name(): void;
}
//接口限制了类的结构，类必须包含接口中的所有属性和方法
class anime implements Anime {
    name: string;
    date: string;
    time: string;
    constructor(name: string, date: string, time: string) {
        this.name = name;
        this.date = date;
        this.time = time;
    }
    show_name() {
        console.log(this.name);
    }
}

class nong {
    private _name: string;
    private _time: string;
    private _price: number;
    constructor(name: string, time: string, price: number) {
        this._name = name;
        this._time = time;
        this._price = price;
    }
    set price(price: number) {
        if (price >= 0) {
            this._price = price;
        }
    }
    get name() {
        return this._name;
    }
}


interface Ani{
    length: number
}
function s<T extends Ani>(a: T) : number{
    return a.length;
}
console.log(s("abc"));

class No<T>{
    name: T
    constructor(name: T){
        this.name = name
    }
}
const n = new No<string>("aaa")
console.log(n.name);




let box1 = document.getElementById('box1');
box1?.addEventListener('click', function () {
    alert("hello");
    // alert(jb1.name);
});
